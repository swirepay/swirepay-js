/**
 * Swirepay API
 * Swirepay REST APIs' are resource-oriented URLs that accept JSON-encoded request bodies, return JSON-encoded responses, and use standard HTTP response codes, authentication, and verbs. You can use the Swirepay API in test mode, which does not affect your live data or interact with the banking networks. The `API key` you use to authenticate the request determines whether the request is live mode or test mode.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apiteam@swirepay.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SwirepayApi);
  }
}(this, function(expect, SwirepayApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SwirepayApi.PaymentSessionPublicResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PaymentSessionPublicResponse', function() {
    it('should create an instance of PaymentSessionPublicResponse', function() {
      // uncomment below and update the code to test PaymentSessionPublicResponse
      //var instane = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be.a(SwirepayApi.PaymentSessionPublicResponse);
    });

    it('should have the property gid (base name: "gid")', function() {
      // uncomment below and update the code to test the property gid
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property amountDisputed (base name: "amountDisputed")', function() {
      // uncomment below and update the code to test the property amountDisputed
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property amountRefunded (base name: "amountRefunded")', function() {
      // uncomment below and update the code to test the property amountRefunded
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property paymentDate (base name: "paymentDate")', function() {
      // uncomment below and update the code to test the property paymentDate
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property refundDate (base name: "refundDate")', function() {
      // uncomment below and update the code to test the property refundDate
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property disputeDate (base name: "disputeDate")', function() {
      // uncomment below and update the code to test the property disputeDate
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property receiptNumber (base name: "receiptNumber")', function() {
      // uncomment below and update the code to test the property receiptNumber
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property nextActionUrl (base name: "nextActionUrl")', function() {
      // uncomment below and update the code to test the property nextActionUrl
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

    it('should have the property returnUrl (base name: "returnUrl")', function() {
      // uncomment below and update the code to test the property returnUrl
      //var instance = new SwirepayApi.PaymentSessionPublicResponse();
      //expect(instance).to.be();
    });

  });

}));
